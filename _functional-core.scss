// This is the core stuff.

// Mixin to create rules for padding and margins.
@mixin padmar($n, $key, $suffix, $prop, $length) {
  .#{$key}l#{$n}#{$suffix} { #{$prop}-left: $length; }
  .#{$key}r#{$n}#{$suffix} { #{$prop}-right: $length; }
  .#{$key}t#{$n}#{$suffix} { #{$prop}-top: $length; }
  .#{$key}b#{$n}#{$suffix} { #{$prop}-bottom: $length; }
  .#{$key}h#{$n}#{$suffix} { #{$prop}-left: $length;  #{$prop}-right: $length; }
  .#{$key}v#{$n}#{$suffix} { #{$prop}-top: $length;  #{$prop}-bottom: $length; }
}
//
// Offer these with breakpoint suffixes
//
@mixin each_suffix($suffix) {

  //
  // Padding, margins.
  // -----------------
  //
  @include padmar(0, 'm', $suffix, 'margin', 0);
  @include padmar(0, 'p', $suffix, 'padding', 0);
  @each $n, $length in $spacings_map {
    @include padmar($n, 'm', $suffix, 'margin', $length);
    @include padmar($n, 'p', $suffix, 'padding', $length);

    // Negative horizontal k:w margins.
    .ml-#{$n}#{$suffix} { margin-left: -$length; }
    .mr-#{$n}#{$suffix} { margin-right: -$length; }
    .mh-#{$n}#{$suffix} { margin-left: -$length;  margin-right: -$length; }
  }

  //
  // Displays
  // --------
  //
  .db#{$suffix} { display:block; }
  .di#{$suffix} { display:inline; }
  .dib#{$suffix} { display:inline-block; }
  .df#{$suffix} { display: flex; }
  .dn#{$suffix} { display: none; }

  //
  // Flexbox.
  // --------
  //
  .fw-w#{$suffix} { flex-wrap: wrap; }
  .fw-n#{$suffix} { flex-wrap: nowrap; }
  .fi-2#{$suffix} { flex: 0 0 50%; }
  .fi-3#{$suffix} { flex: 0 0 33.333%; }
  .fi-a#{$suffix} { flex: 0 0 auto; }
  .fi-ags#{$suffix} { flex: 1 1 auto; }

  .fi-ag#{$suffix} { flex: 1 0 auto; }
  .fi-as#{$suffix} { flex: 0 1 auto; }

  .fjc-end#{$suffix} { justify-content: flex-end; }
  .fjc-start#{$suffix} { justify-content: flex-start; }
  .fjc-centre#{$suffix} { justify-content: center; }
  .fjc-sb#{$suffix} { justify-content: space-between ; }
  .fjc-sa#{$suffix} { justify-content: space-around ; }

  .fai-end#{$suffix} { align-items: flex-end; }
  .fai-start#{$suffix} { align-items: flex-start; }
  .fai-centre#{$suffix} { align-items: center; }

  .fd-col#{$suffix} { flex-direction: column; }

  @for $n from 1 through 12 {
    .fo-#{$n}#{$suffix} { order: $n; }
  }


  //
  // Position
  //
  .pos-r#{$suffix} { position: relative; }
  .pos-a#{$suffix} { position: absolute; }
  .pos-f#{$suffix} { position: fixed; }
  .pos-s#{$suffix} { position: static; }
  .top0#{$suffix}  { top: 0; }
  .bot0#{$suffix}  { bottom: 0; }
  .left0#{$suffix} { left: 0; }
  .right0#{$suffix}{ right: 0; }

  // Border radii
  @for $n from 1 through length($border-radius-list) {
    .bdrr-#{$n} { border-radius: nth($border-radius-list, $n); }
  }

  //
  // Text alignment.
  // ---------------
  //
  .centre#{$suffix} { text-align: center; }
  .right#{$suffix} { text-align: right; }
  .left#{$suffix} { text-align: left; }
}
@include each_suffix('');

//
// If configured to, create the above rules for suffixes like -s for small+
//
@if ($include_cumulative_breakpoints == "yes") {
  @each $suffix, $breakpoint in $breakpoints_map {
    @media screen and (min-width: $breakpoint) { @include each_suffix("-#{$suffix}"); }
  }
}

//
// If configured to, create the above rules for suffixes like -so for small up to medium.
//
@if ($include_specific_breakpoints == "yes") {

  $breakpoint_suffixes: ();
  @each $k, $v in $breakpoints_map { $breakpoint_suffixes: append($breakpoint_suffixes, $k); }
  $next_key_index: 2;
  @each $k, $breakpoint in $breakpoints_map {
    @if ($next_key_index <= length($keys)) {
      $next_key: nth($keys, $next_key_index);
      $next_breakpoint: map_get($breakpoints_map, $next_key);
      $next_key_index: $next_key_index + 1;
      @media screen and (min-width: $breakpoint ) and  ( max-width: ($next_breakpoint - 1)) { @include each_suffix("-#{$k}o"); }
    }
  }
}


// Height
.h100 { height: 100%; }
.w100 { width: 100%; }

// Lists
.ls-none {
  list-style: none;
}

// Opacity
@each $_ in 0 1 2 3 4 5 {
  .op-#{$_} { opacity: ($_ * 0.2); }
}

// Text-decoration
.td-off { text-decoration: none; }
.tt-up { text-transform: uppercase; }
.tt-off { text-transform: none; }

// Box shadows.
@for $n from 1 through length($box-shadows-list) {
  .bxs-#{$n} { box-shadow: nth($box-shadows-list, $n); }
}
// Text shadows.
@for $n from 1 through length($text-shadows-list) {
  .txs-#{$n} { text-shadow: nth($text-shadows-list, $n); }
}
// Overflow
.ov-a { overflow: auto; }
.ov-h { overflow: hidden; }
.ov-v { overflow: visible; }
