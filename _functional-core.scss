// This is the core stuff.

@if ($build-mode == 'all') {
  @debug "
  → Build mode all: every combination will be created
  → Massive CSS file. Consider dev";
}
@if ($build-mode == 'dev') {
  @debug "
  → Build mode dev: every combination will be created
  → but classes not listed in $classes-in-use
  → will add a :before warning element";
}
@if ($build-mode == 'prod') {
  @debug "
  → Build mode prod: only building classes listed in $classes-in-use";
}

@if (not global_variable_exists(not-defined-errors)) {
  $not-defined-errors: () !global;
}
@mixin if-required($class) {

  @if ($build-mode == 'all') {
    // Include everything.
    .#{$class} { @content; }
  }
  @else {
    // only include classes explicitly listed in $classes-in-use
    @if (index($classes-in-use, $class) != null) {
      // This class is required.
      .#{$class} { @content; }
    }
    @else {
      // This class is NOT required.
      @if ($build-mode == 'dev') {
        // Dev mode: build class anyway, but slap on a fat warning.
        .#{$class} { @content; }

        $not-defined-errors: append($not-defined-errors, $class) !global;
      }
    }
  }
}

// Mixin to create rules for padding and margins.
@mixin padmar($n, $key, $suffix, $prop, $length) {

  @include if-required(#{$key}l#{$n}#{$suffix}) { #{$prop}-left: $length; };
  @include if-required(#{$key}r#{$n}#{$suffix}) { #{$prop}-right: $length; };
  @include if-required(#{$key}t#{$n}#{$suffix}) { #{$prop}-top: $length; };
  @include if-required(#{$key}b#{$n}#{$suffix}) { #{$prop}-bottom: $length; };
  @include if-required(#{$key}h#{$n}#{$suffix}) { #{$prop}-left: $length;  #{$prop}-right: $length; };
  @include if-required(#{$key}v#{$n}#{$suffix}) { #{$prop}-top: $length;  #{$prop}-bottom: $length; };
}
//
// Offer these with breakpoint suffixes
//
@mixin each_suffix($suffix) {

  //
  // Padding, margins.
  // -----------------
  //
  @include padmar(0, 'm', $suffix, 'margin', 0);
  @include padmar(0, 'p', $suffix, 'padding', 0);
  @include padmar('a', 'm', $suffix, 'margin', auto);
  @include padmar('a', 'p', $suffix, 'padding', auto);
  @each $n, $length in $spacings_map {
    @include padmar($n, 'm', $suffix, 'margin', $length);
    @include padmar($n, 'p', $suffix, 'padding', $length);

    // Negative horizontal k:w margins.
    @include if-required(ml-#{$n}#{$suffix}) { margin-left: -$length; };
    @include if-required(mr-#{$n}#{$suffix}) { margin-right: -$length; };
    @include if-required(mh-#{$n}#{$suffix}) { margin-left: -$length;  margin-right: -$length; };
  }

  //
  // Displays
  // --------
  //
  @include if-required(db#{$suffix}) { display:block; };
  @include if-required(di#{$suffix}) { display:inline; };
  @include if-required(dib#{$suffix}) { display:inline-block; };
  @include if-required(df#{$suffix}) { display: flex; };
  @include if-required(dn#{$suffix}) { display: none; };

  //
  // Flexbox.
  // --------
  //
  @include if-required(fw-w#{$suffix}) { flex-wrap: wrap; };
  @include if-required(fw-n#{$suffix}) { flex-wrap: nowrap; };
  @include if-required(fi-2#{$suffix}) { flex: 0 0 50%; };
  @include if-required(fi-3#{$suffix}) { flex: 0 0 33.333%; };
  @include if-required(fi-a#{$suffix}) { flex: 0 0 auto; };
  @include if-required(fi-ags#{$suffix}) { flex: 1 1 auto; };

  @include if-required(fi-ag#{$suffix}) { flex: 1 0 auto; };
  @include if-required(fi-as#{$suffix}) { flex: 0 1 auto; };

  @include if-required(fjc-end#{$suffix}) { justify-content: flex-end; };
  @include if-required(fjc-start#{$suffix}) { justify-content: flex-start; };
  @include if-required(fjc-centre#{$suffix}) { justify-content: center; };
  @include if-required(fjc-sb#{$suffix}) { justify-content: space-between ; };
  @include if-required(fjc-sa#{$suffix}) { justify-content: space-around ; };

  @include if-required(fai-end#{$suffix}) { align-items: flex-end; };
  @include if-required(fai-start#{$suffix}) { align-items: flex-start; };
  @include if-required(fai-centre#{$suffix}) { align-items: center; };
  @include if-required(fai-stretch#{$suffix}) { align-items: stretch; };

  @include if-required(fd-col#{$suffix}) { flex-direction: column; };

  @for $n from 1 through 12 {
    @include if-required(fo-#{$n}#{$suffix}) { order: $n; };
  }


  //
  // Position
  //
  @include if-required(pos-r#{$suffix}) { position: relative; };
  @include if-required(pos-a#{$suffix}) { position: absolute; };
  @include if-required(pos-f#{$suffix}) { position: fixed; };
  @include if-required(pos-s#{$suffix}) { position: static; };
  @include if-required(top0#{$suffix})  { top: 0; };
  @include if-required(bot0#{$suffix})  { bottom: 0; };
  @include if-required(left0#{$suffix}) { left: 0; };
  @include if-required(right0#{$suffix}) { right: 0; };

  // Border radii
  @for $n from 1 through length($border-radius-list) {
    @include if-required(bdrr-#{$n}) { border-radius: nth($border-radius-list, $n); };
  }

  //
  // Text alignment.
  // ---------------
  //
  @include if-required(centre#{$suffix}) { text-align: center; };
  @include if-required(right#{$suffix}) { text-align: right; };
  @include if-required(left#{$suffix}) { text-align: left; };
}
@include each_suffix('');

//
// If configured to, create the above rules for suffixes like -s for small+
//
@if ($include_cumulative_breakpoints == "yes") {
  @each $suffix, $breakpoint in $breakpoints_map {
    @media screen and (min-width: $breakpoint) { @include each_suffix("-#{$suffix}"); }
  }
}

//
// If configured to, create the above rules for suffixes like -so for small up to medium.
//
@if ($include_specific_breakpoints == "yes") {

  $breakpoint_suffixes: ();
  @each $k, $v in $breakpoints_map { $breakpoint_suffixes: append($breakpoint_suffixes, $k); }
  $next_key_index: 2;
  @each $k, $breakpoint in $breakpoints_map {
    @if ($next_key_index <= length($keys)) {
      $next_key: nth($keys, $next_key_index);
      $next_breakpoint: map_get($breakpoints_map, $next_key);
      $next_key_index: $next_key_index + 1;
      @media screen and (min-width: $breakpoint ) and  ( max-width: ($next_breakpoint - 1)) { @include each_suffix("-#{$k}o"); }
    }
  }
}


// Height
.h100 { height: 100%; }
.w100 { width: 100%; }

// Lists
.ls-none {
  list-style: none;
}

// Opacity
@each $_ in 0 1 2 3 4 5 {
  .op-#{$_} { opacity: ($_ * 0.2); }
}

// Text-decoration
.td-off { text-decoration: none; }
.tt-up { text-transform: uppercase; }
.tt-off { text-transform: none; }

// Box shadows.
@for $n from 1 through length($box-shadows-list) {
  .bxs-#{$n} { box-shadow: nth($box-shadows-list, $n); }
}
// Text shadows.
@for $n from 1 through length($text-shadows-list) {
  .txs-#{$n} { text-shadow: nth($text-shadows-list, $n); }
}
// Overflow
.ov-a { overflow: auto; }
.ov-h { overflow: hidden; }
.ov-v { overflow: visible; }


// Errors.
@if (length($not-defined-errors) > 0) {
  @keyframes functional-error {
    0% { background-color: #400; }
    10% { background-color: #c00; }
    100% { background-color: #400; }
  }
  %not-defined-error {
    background-color: #b11;
    opacity:1;
    animation: functional-error 0.5s linear infinite;
    border:solid 1px white;
    color:white;
    padding:3px 8px;
    border-radius:4px;
    position:absolute;
    z-index:100;
    line-height:1;
    font-size:(14rem/16);
  }
  @each $class in $not-defined-errors {
    .#{$class}:before {
      content:"#{$class} not defined.";
      @extend %not-defined-error;
    }
  }
}

@import 'visually-hidden';
.vh { @include visually-hidden }
